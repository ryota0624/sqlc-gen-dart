{{- /*
https://pkg.go.dev/text/template
https://github.com/sqlc-dev/sqlc/blob/main/protos/plugin/codegen.proto
*/ -}}

{{- define "EvalQueryResult" -}}
{{- if eq .FunctionReturnType  "void" }}
  return;
{{- else -}}
{{if gt (len .Columns) 1 -}}
{{if eq .Cmd ":many" }}
  return result.map({{ .RowType }}.fromQueryResult).toList();
{{- end -}}
{{if eq .Cmd ":one" }}
  if (result.isNotEmpty) {
    return {{ .RowType }}.fromQueryResult(result.first);
  }
  return null;
{{- end -}}
{{- else -}}
{{if  eq .Cmd ":many" }}
  return result.cast<{{ .RowType }}>();
{{- end -}}
{{if eq .Cmd ":one" }}
  if (result.isNotEmpty) {
    return result.cast<{{ .RowType }}>();
  }
  return null;
{{- end -}}
{{- end -}}
{{- end }}
{{- end -}}

import 'package:meta/meta.dart';
import 'package:postgres/postgres.dart';
import 'package:sqlc_dart/sqlc_dart.dart';
import '{{ .DomainTypesDartFilePath }}';

{{range .Queries -}}
{{- range .Comments -}}// {{.}}
{{- end -}}

{{- $evalQueryResult := EvalQueryResultInput . -}}
{{$rowType := $evalQueryResult.RowType -}}

{{if gt (len .Columns) 1 }}
class {{ $rowType }} extends RowBase {
  {{- range .Columns}}
  // psql: {{ PsqlColumnTypeDescription . }}
  {{- if gt (len .Comment) 1 -}}/// {{ .Comment }}{{end}}
  final {{ DartType .}}{{- if not .NotNull }}?{{end}} {{ ToCamelCase .Name}};
  {{- end}}

  @visibleForTesting
  Map<String, Object?> toFieldMap() => {
    {{- range .Columns}}
    '{{.Name}}': {{ ToCamelCase .Name }},
    {{- end}}
  };

  {{ $rowType }}({
    {{- range .Columns}}
    required this.{{ ToCamelCase .Name}},
    {{- end}}
  });

  factory {{ $rowType }}.fromQueryResult(List<Object?> row) {
    return {{ $rowType }}(
      {{- range $i, $column := .Columns}}
      {{ ToCamelCase $column.Name}}: {{ if IsDomainTypeColumn $column }}{{- DartType $column -}}.fromQueryResult(row[{{$i}}]),
      {{- else  -}} row[{{$i}}] as {{ DartType $column }},{{end}}
      {{- end}}
    );
  }
}
{{- else -}}
typedef {{ $rowType }} = {{ DartType (index .Columns 0) }}{{- if not (index .Columns 0).NotNull -}}?{{- end -}};
{{- end}}

///  {{.Name}} {{.Cmd}}

class {{ ToPascalCase .Name }} {
  final BackendSession _session;
  {{ ToPascalCase .Name }}(this._session);
Future<{{- $evalQueryResult.FunctionReturnType }}> call({
  {{- range .Params}}
    required {{DartType .Column}} {{ToCamelCase .Column.Name}},
  {{- end}}
  QueryExecuteOption? queryExecuteOption,
}) async {
  final filledQueryExecuteOption =
  queryExecuteOption ?? _session.backend.defaultParameter();
  {{if ne $evalQueryResult.FunctionReturnType  "void"}}
    final result = {{ end -}}await _session.backend.execute(
      _session,
"""
  {{ EscapeQueryPlaceholder .Text }}
  """,
  [
  {{- range .Params}}
    {{ToCamelCase .Column.Name}}{{- if IsDomainTypeColumn .Column }}.asSqlType(){{- else }}{{- end}},
  {{- end}}
  ],filledQueryExecuteOption);
{{- template "EvalQueryResult" $evalQueryResult }}
}

}
{{- end -}}
